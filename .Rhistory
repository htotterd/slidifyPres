data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
n = n+length(data[,pollutant]) - sum(is.na(data[,pollutant]))
total = total + sum(data[,pollutant], na.rm=T)
}
mean=round((total/n), digits=3)
return(mean)
}
pollutantmean(directory, "nitrate", 23)
pollutantmean(directory, "sulfate", 1:10)
pollutantmean(directory, "nitrate", 70:72)
directory
i=1
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
head(data)
sum(is.na(Date))
sum(is.na(data$Date))
sum(is.na(data$ID))
sum(data[,sulfate!="NA" & nitrate!="NA"])
sum(data[,sulfate!=NA & nitrate!=NA])
data[,sulfate]
data$sulfate
data[sulfate]
head(data)
data[,sulfate]
data[,"sulfate"]
sum(data[,"sulfate"!=NA])
sum(data$sulfate)
sum(data$sulfate, na.rm=T)
sum(data$sulfate!=NA)
data[,data$sulfate!=NA]
length(data)
length(data[,"sulfate"])
sum(is.na(data$sulfate))
sum(is.na(data$nitrate))
sum(is.na(data$nitrate) & is.na(data$nitrate))
sum(is.na(data$nitrate) && is.na(data$nitrate))
sum(is.na(data$nitrate) & is.na(data$nitrate))
read.csv(paste(directory, "/00", 2, ".csv", sep=""))
data2 <- read.csv(paste(directory, "/00", 2, ".csv", sep=""))
sum(is.na(data2$nitrate) & is.na(data2$nitrate))
sum(is.na(data2$nitrate))
sum(is.na(data2$sulfate) & is.na(data2$nitrate))
sum(is.na(data2$sulfate))
complete <- function(directory, id=1:332) {
completecases = 0
for(i in id[1]:(id[1]+length(id)-1)) {
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
completecases = completecases + length(data$sulfate) - sum(is.na(data2$sulfate) & is.na(data2$nitrate))
}
}
completecases(directory, 1)
complete(directory, 1)
complete <- function(directory, id=1:332) {
completecases = 0
for(i in id[1]:(id[1]+length(id)-1)) {
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
completecases = completecases + length(data$sulfate) - sum(is.na(data2$sulfate) & is.na(data2$nitrate))
}
return(completecases)
}
complete(directory, 1)
complete <- function(directory, id=1:332) {
completecases = 0
for(i in id[1]:(id[1]+length(id)-1)) {
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
completecases = completecases + length(data$sulfate) - sum(is.na(data$sulfate) & is.na(data$nitrate))
}
return(completecases)
}
complete(directory, 1)
length(data$sulfate)
sum(is.na(data$sulfate) & is.na(data$nitrate))
1461-1339
complete <- function(directory, id=1:332) {
for(i in id[1]:(id[1]+length(id)-1)) {
completecases[i] <- NULL
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
completecases[i] = length(data$sulfate) - sum(is.na(data$sulfate) & is.na(data$nitrate))
}
completedata <- data.frame(id, completecases)
return(completedata)
}
complete(directory, 1:2)
complete <- function(directory, id=1:332) {
completecases <- NULL
for(i in id[1]:(id[1]+length(id)-1)) {
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
completecases[i] = length(data$sulfate) - sum(is.na(data$sulfate) & is.na(data$nitrate))
}
completedata <- data.frame(id, completecases)
return(completedata)
}
complete(directory, 1:2)
complete <- function(directory, id=1:332) {
nobs <- NULL
for(i in id[1]:(id[1]+length(id)-1)) {
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
nobs[i] = length(data$sulfate) - sum(is.na(data$sulfate) & is.na(data$nitrate))
}
completedata <- data.frame(id, nobs)
return(completedata)
}
complete(directory, 1)
complete <- function(directory, id=1:332) {
nobs <- NULL
for(i in id[1]:(id[1]+length(id)-1)) {
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
nobs[i] = length(data$sulfate) - sum(is.na(data$sulfate) | is.na(data$nitrate))
}
completedata <- data.frame(id, nobs)
return(completedata)
}
complete(directory, 1)
complete(directory, c(2,4,8,10,12))
complete <- function(directory, id=1:332) {
nobs <- NULL
for(i in id[1]:(id[1]+length(id)-1)) {
k=1
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
nobs[k] = length(data$sulfate) - sum(is.na(data$sulfate) | is.na(data$nitrate))
k=k+1
}
completedata <- data.frame(id, nobs)
return(completedata)
}
complete(directory, c(2,4,8,10,12))
id=c(2,4,8,10,12)
length(id)
id[1]
complete <- function(directory, id=1:332) {
nobs <- NULL
for(i in id) {
k=1
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
nobs[k] = length(data$sulfate) - sum(is.na(data$sulfate) | is.na(data$nitrate))
k=k+1
}
completedata <- data.frame(id, nobs)
return(completedata)
}
complete(directory, 1)
complete(directory, c(2,4,8,10,12))
complete <- function(directory, id=1:332) {
nobs <- NULL
k=1
for(i in id) {
if (i>99) {
data <- read.csv(paste(directory, "/", i, ".csv", sep=""))
}
else if(i>9) {
data <- read.csv(paste(directory, "/0", i, ".csv", sep=""))
}
else {
data <- read.csv(paste(directory, "/00", i, ".csv", sep=""))
}
nobs[k] = length(data$sulfate) - sum(is.na(data$sulfate) | is.na(data$nitrate))
k=k+1
}
completedata <- data.frame(id, nobs)
return(completedata)
}
complete(directory, 1)
complete(directory, c(2,4,8,10,12))
complete(directory, 30:25)
complete(directory, 3)
library(datasets)
data(iris)
str(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 1, mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
tapply(mtrcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364-15.1
tapply(mtcars$horsepower, mtcars$cyl, mean)
str(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- makeVector(c(1,2,3,4))
x
cachemean(x)
x = c(1,2,3,4)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get <- function() x
setinverse <- function(inverse) { mat <<- inverse}
getinverse <- function() { mat }
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
mat <- x$getinverse()
if(!is.null(mat)) {
return(mat)
}
matrix <- x$get()
inv <- solve(matrix)
x$setinverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get <- function() x
setinverse <- function(inverse) { mat <<- inverse}
getinverse <- function() { mat }
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Computes the inverse of the matrix returned by makeCacheMatrix
cacheSolve <- function(x, ...) {
mat <- x$getinverse()
if(!is.null(mat)) {
return(mat)
}
matrix <- x$get()
inv <- solve(matrix)
x$setinverse(inv)
inv
}
y <- makeCacheMatrix(c(1,2,3,4))
y
prac <- cacheSolve(y)
x <- matrix(c(1,2,3,4), nrow=2)
x
solve(x)
y <- makeCacheMatrix(x)
cacheSolve(y)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
quiz1 <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
quiz1 <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootquiz1 <- xmlRoot(quiz1)
rootquiz1[[1]]
?read.table
test <- read.table("test/X-test.txt")
test <- read.table("test/X_test.txt")
setwd("C:/Users/Helen/Desktop/Senior Project/Getting and Cleaning Data/
Course Project/getdata-projectfiles-UCI HAR Dataset/UCI HAR Dataset")
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
72/7
36/3.05
sqrt(11.80328)
install.packages("datasets")
install.packages("datasets")
data("ToothGrowth")
library(help='datasets')
data(ToothGrowth)
load(ToothGrowth)
View(ToothGrowth)
View('ToothGrowth')
load('ToothGrowth')
View(ToothGrowth)
help(ToothGrowth)
with(ToothGrowth, summary(len))
with(ToothGrowth, hist(len))
abline(h=mean(len), col="red")
abline(h=mean(ToothGrowth$len), col="red")
abline(h=mean(ToothGrowth$len), col="red", lwd=2)
abline(h=mean(ToothGrowth$len), col="red", lwd=2)
abline(h=18.81, col="red", lwd=2)
with(ToothGrowth, hist(len))
abline(h=18.81, col="red", lwd=2)
abline(v=18.81, col="red", lwd=2)
abline(v=mean(len), col="red", lwd=2)
abline(v=mean(len)), col="red", lwd=2)
abline(v=mean(len), col="red", lwd=2)
abline(v=mean(ToothGrowth$len), col="red", lwd=2)
?Median
??med
?median
abline(v=median(ToothGrowth$len), col="blue", lwd=2)
help(ToothGrowth)
library(ggplot2)
qplot(len, data=ToothGrowth, facets = .~ supp)
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count")
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
main="Tooth Length in Guinea Pigs by Supplement Type", binwidth=5)
main="Tooth Length in Guinea Pigs by Supplement Type") + geom_abline(v=18)
main="Tooth Length in Guinea Pigs by Supplement Type" + geom_abline(v=18))
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type" + geom_abline(v=18))
p + geom_vline(c(18,20))
p <- qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
p + geom_vline(c(18,20))
p + geom_vline(aes(xintercept=z), c(18,20))
p + geom_vline(aes(xintercept = c(15, 20)))
qplot(len, data=ToothGrowth, facets = .~ dose, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
qplot(len, data=ToothGrowth, facets = .~ dose, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Dose")
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
?summary
with(ToothGrowth, tapply(len, supp, mean))
with(ToothGrowth, tapply(len, supp, summary))
?summary
help(ToothGrowth)
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
qplot(y=len, x=dose, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count",
main="Tooth Length in Guinea Pigs by Supplement Type")
qplot(y=len, x=dose, data=ToothGrowth, facets = .~ supp, xlab="Length",
main="Tooth Length in Guinea Pigs by Supplement Type")
qplot(y=len, x=dose, data=ToothGrowth, facets = .~ supp, xlab="Dose", ylab="Length",
main="Tooth Length in Guinea Pigs by Supplement Type")
with(ToothGrowth, tapply(len, list(supp, dose), summary))
with(ToothGrowth, tapply(len, list(supp, as.factor(dose), summary))
)
with(ToothGrowth, tapply(len, list(supp, as.factor(dose)), summary))
with(ToothGrowth, tapply(len, list(supp, as.factor(dose)), mean))
library(reshape)
?melt
melt(avg)
avg <- with(ToothGrowth, tapply(len, list(supp, as.factor(dose)), mean))
melt(avg)
avg <- melt(avg)
avg
help(ToothGrowth)
qplot(len, data=ToothGrowth, facets = .~ supp)
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count")
with(ToothGrowth, tapply(len, supp, mean))
with(ToothGrowth, tapply(len, supp, summary))
?ttest
?t.test
with(ToothGrowth, t.test(len, supp))
with(ToothGrowth, t.test(len, y=supp))
with(ToothGrowth, t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==0.5), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.0), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.5), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.5), t.test(len~supp))
ToothGrowth$dose
with(subset(ToothGrowth, ToothGrowth$dose==2.0), t.test(len~supp))
qplot(len, data=ToothGrowth, facets = .~ supp, xlab="Length", ylab="Count")
with(subset(ToothGrowth, ToothGrowth$dose==0.5), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.0), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==2.0), t.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==0.5), bartlett.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==1.0), bartlett.test(len~supp))
with(subset(ToothGrowth, ToothGrowth$dose==2.0), bartlett.test(len~supp))
setwd("C:/Users/Helen/Desktop/Senior Project/Developing Data Products")
library(shiny)
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
runApp("Project")
deployApp("Project", account='htotterdell')
library(shinyapps)
deployApp("Project", account='htotterdell')
library(slidify)
install.packages("slidify")
library(slidify)
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
library(slidify)
install_github("slidifyLibraries", 'ramnathv')
library(slidify)
author("ZombieSim_Pitch")
runApp("Project")
setwd("C:/Users/Helen/Desktop/Senior Project/Developing Data Products")
runApp("Project")
setwd("C:/Users/Helen/Desktop/Senior Project/Developing Data Products/ZombieSim_Pitch")
![width]("Plot.png")
publish(title = 'ZombieSim_App', 'index.html', host = 'rpubs')
publish(user="htotterd", repo="slidifyPres")
publish(user="htotterd", repo="slidifyPres")
publish(user="htotterd", repo="htotterd.github.io")
